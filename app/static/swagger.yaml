swagger: "2.0"

# General API Information - Updated 2025
info:
  title: "üîß Mechanic Shop Management API"
  description: |
    # Professional REST API for Mechanic Shop Operations

    **Created by Jacob Dyson** - Full-Stack Developer & API Architect

    ## üöÄ Overview
    A comprehensive, production-ready management system designed specifically for mechanic shops and automotive service centers. This API provides complete business operations management with enterprise-level features and security.

    ## ‚ú® Key Features & Capabilities
    - üîê **Advanced JWT Authentication** - Role-based access control with customer and mechanic permissions
    - üë• **Customer Management** - Complete customer lifecycle from registration to service history
    - üîß **Mechanic Operations** - Staff management, work assignment, and performance tracking
    - üé´ **Service Ticket System** - End-to-end workflow from service request to completion
    - üì¶ **Inventory Management** - Parts tracking, stock management, and automatic updates
    - ‚è±Ô∏è **Labor Time Tracking** - Detailed logging of mechanic hours and productivity metrics
    - ÔøΩ **Business Analytics** - Comprehensive reports for operations optimization
    - üß™ **Enterprise Testing** - 43 comprehensive tests ensuring 100% reliability
    - üöÄ **Production Scalability** - Rate limiting, caching, and optimized database queries

    ## üîí Security & Authentication
    This API uses **JWT (JSON Web Tokens)** for secure authentication. There are two distinct user roles:

    ### Customer Authentication
    - Access to personal service tickets and account management
    - Create new service requests and track progress
    - View service history and labor details

    ### Mechanic Authentication  
    - Manage inventory and parts
    - Access assigned service tickets
    - Log labor hours and update ticket status
    - View productivity reports and analytics

    ## üìã Getting Started

    ### 1. Authentication Flow
    ```
    POST /customers/login  # For customers
    POST /mechanics/login  # For mechanics
    ```
    Returns JWT token to include in `Authorization: Bearer <token>` header

    ### 2. Customer Workflow
    ```
    1. Register: POST /customers/
    2. Login: POST /customers/login
    3. Create Ticket: POST /service-tickets/
    4. Track Progress: GET /service-tickets/my-tickets
    ```

    ### 3. Mechanic Workflow  
    ```
    1. Login: POST /mechanics/login
    2. View Tickets: GET /mechanics/{id}/service_tickets
    3. Log Hours: POST /service-tickets/{id}/labor
    4. Manage Parts: POST /inventory/
    ```

    ## üåê Environment Information
    - **Production URL:** https://mechanic-management-system.onrender.com
    - **Documentation:** https://mechanic-management-system.onrender.com/api/docs
    - **Repository:** https://github.com/Jacobd1615/Mechanic-management-system
    - **Status:** Live & Operational ‚úÖ

    ## üìû Support & Contact
    For technical support, feature requests, or business inquiries:
    - **Developer:** Jacob Dyson
    - **GitHub:** [@Jacobd1615](https://github.com/Jacobd1615)
    - **Project Issues:** [Report Issues](https://github.com/Jacobd1615/Mechanic-management-system/issues)

    ## üìÑ API Standards
    - **Format:** JSON (application/json)
    - **Authentication:** JWT Bearer Tokens
    - **Rate Limiting:** Applied per endpoint
    - **Caching:** Optimized for performance
    - **Error Handling:** Consistent HTTP status codes
    - **Validation:** Comprehensive input validation
  version: "2.0.0"
  contact:
    name: "Jacob Dyson"
    url: "https://github.com/Jacobd1615"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"

# API Host and Schemes
host: "mechanic-management-system.onrender.com"
basePath: "/"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"

# Security Definitions
securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"

# API Endpoints
paths:
  # Customer Endpoints
  /customers:
    get:
      tags:
        - "customers"
      summary: "List all customers"
      description: |
        **Retrieve Complete Customer Directory**

        Returns a comprehensive list of all registered customers in the system. This endpoint is essential for:
        - Customer service representatives viewing client base
        - Generating customer reports and analytics  
        - Administrative oversight of customer accounts

        **Authentication Required:** Customer JWT token

        **Features:**
        - Paginated results for large datasets
        - Cached responses for optimal performance
        - Filtered sensitive information (passwords excluded)

        **Rate Limit:** Standard API limits apply
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Customers retrieved successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CreateCustomerResponse"
        401:
          description: "Authentication required - Invalid or missing JWT token"
        403:
          description: "Access denied - Insufficient permissions"
    post:
      tags:
        - "customers"
      summary: "Create a new customer"
      description: |
        **Customer Registration & Account Creation**

        Register a new customer in the mechanic shop system. This endpoint handles:
        - New customer account creation
        - Email uniqueness validation
        - Password security enforcement
        - Phone number formatting and validation

        **No Authentication Required** - Public registration endpoint

        **Validation Rules:**
        - Email must be unique and valid format
        - Phone number must be valid format
        - Password minimum 6 characters (configurable)
        - Name cannot be empty or contain special characters

        **Rate Limit:** 10 registrations per hour per IP address

        **Post-Registration Flow:**
        1. Account created successfully
        2. Customer can immediately login
        3. Access to service ticket creation
        4. Personal dashboard and service history
      parameters:
        - in: "body"
          name: "body"
          description: "Customer registration information"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          description: "Customer created successfully"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
        400:
          description: "Validation error - Invalid input data"
        409:
          description: "Conflict - Email already exists"

  /customers/login:
    post:
      tags:
        - "customers"
      summary: "Customer login"
      description: "Validates customer credentials and returns an authentication token."
      parameters:
        - in: "body"
          name: "body"
          description: "Login credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"

  /customers/search:
    get:
      tags:
        - "customers"
      summary: "Search customers"
      description: "Search for customers by name or email (requires customer authentication)."
      security:
        - bearerAuth: []
      parameters:
        - in: "query"
          name: "name"
          type: "string"
          required: true
          description: "Search query for name"
      responses:
        200:
          description: "Search results"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CreateCustomerResponse"

  /customers/{customer_id}:
    get:
      tags:
        - "customers"
      summary: "Get a customer"
      description: "Retrieve details of a specific customer by ID (requires customer authentication)."
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "customer_id"
          type: "integer"
          required: true
          description: "ID of the customer"
      responses:
        200:
          description: "Customer retrieved successfully"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
    put:
      tags:
        - "customers"
      summary: "Update a customer"
      description: "Update an existing customer's information (requires customer authentication)."
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "customer_id"
          type: "integer"
          required: true
          description: "ID of the customer"
        - in: "body"
          name: "body"
          description: "Updated customer information"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        200:
          description: "Customer updated successfully"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
    delete:
      tags:
        - "customers"
      summary: "Delete a customer"
      description: "Remove a customer from the system (requires customer authentication)."
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "customer_id"
          type: "integer"
          required: true
          description: "ID of the customer"
      responses:
        200:
          description: "Customer deleted successfully"
          schema:
            $ref: "#/definitions/DeleteResponse"

  # Service Ticket Endpoints
  /service-tickets:
    get:
      tags:
        - "service-tickets"
      summary: "List all service tickets"
      description: |
        **Complete Service Ticket Management Overview**

        Retrieve a comprehensive list of all service tickets in the system. This endpoint provides:
        - Full ticket lifecycle visibility
        - Associated customer and mechanic information
        - Labor hour summaries and part usage
        - Current status and completion tracking

        **Public Access** - No authentication required for general viewing

        **Data Includes:**
        - Ticket ID, description, and VIN
        - Customer information and contact details
        - Assigned mechanics and their specializations
        - Service dates and completion status
        - Associated parts and labor costs

        **Use Cases:**
        - Shop management dashboard
        - Customer service inquiries
        - Operational reporting and analytics
        - Workflow optimization analysis
      responses:
        200:
          description: "Service tickets retrieved successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceTicketResponse"
        500:
          description: "Internal server error"
    post:
      tags:
        - "service-tickets"
      summary: "Create a service ticket"
      description: |
        **New Service Request Creation**

        Create a new service ticket for automotive repair or maintenance. This endpoint:
        - Validates customer authentication
        - Creates comprehensive service record
        - Assigns unique tracking number
        - Initializes workflow processes

        **Authentication Required:** Customer JWT token

        **Automatic Processing:**
        - Customer ID extracted from JWT token
        - Ticket assigned unique identifier
        - Initial status set to 'Open'
        - Timestamp recorded for creation

        **Required Information:**
        - Vehicle VIN (Vehicle Identification Number)
        - Detailed service description
        - Preferred service date

        **Rate Limit:** 10 tickets per hour per customer

        **Workflow Integration:**
        1. Ticket created in system
        2. Available mechanics notified
        3. Customer receives confirmation
        4. Service scheduling initiated
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Service ticket information"
          required: true
          schema:
            $ref: "#/definitions/CreateServiceTicketPayload"
      responses:
        201:
          description: "Service ticket created successfully"
          schema:
            $ref: "#/definitions/ServiceTicketResponse"
        401:
          description: "Authentication required"
        400:
          description: "Invalid input data"

  /service-tickets/my-tickets:
    get:
      tags:
        - "service-tickets"
      summary: "List customer's service tickets"
      description: "Retrieve all service tickets for the authenticated customer."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Customer tickets retrieved successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceTicketResponse"

  /service-tickets/{ticket_id}:
    get:
      tags:
        - "service-tickets"
      summary: "Get a service ticket"
      description: |
        **Detailed Service Ticket Information**

        Retrieve comprehensive details of a specific service ticket by ID. This endpoint provides complete ticket information including customer details, assigned mechanics, labor logs, and associated parts.

        **Public Access** - No authentication required for transparency

        **Professional Features:**
        - Complete ticket lifecycle information
        - Associated customer and mechanic details
        - Labor hour summaries and cost calculations
        - Parts usage and inventory integration
        - Service status and completion tracking

        **Data Includes:**
        - Ticket identification and VIN
        - Customer contact information
        - Assigned mechanic specializations
        - Detailed labor logs with timestamps
        - Associated parts and costs
        - Service completion status

        **Business Applications:**
        - Customer service inquiries
        - Service progress tracking
        - Cost estimation and billing
        - Quality assurance reviews
      parameters:
        - in: "path"
          name: "ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket"
      responses:
        200:
          description: "Service ticket retrieved successfully"
          schema:
            $ref: "#/definitions/ServiceTicketResponse"
    put:
      tags:
        - "service-tickets"
      summary: "Update a service ticket"
      description: "Update an existing service ticket (requires customer authentication)."
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket"
        - in: "body"
          name: "body"
          description: "Updated service ticket information"
          required: true
          schema:
            $ref: "#/definitions/UpdateServiceTicketPayload"
      responses:
        200:
          description: "Service ticket updated successfully"
          schema:
            $ref: "#/definitions/ServiceTicketResponse"
    delete:
      tags:
        - "service-tickets"
      summary: "Delete a service ticket"
      description: |
        **Service Ticket Removal**

        Permanently remove a service ticket from the system. This action should be used carefully as it affects historical records and billing.

        **Public Access** - No authentication required (Administrative decision)

        **Professional Features:**
        - Complete ticket removal from system
        - Associated data cleanup (labor logs, parts)
        - Audit trail maintenance for compliance
        - Customer notification capabilities

        **Important Considerations:**
        - Action cannot be undone once executed
        - Associated labor logs are preserved for payroll
        - Parts usage history maintained for inventory
        - Customer service history updated

        **Business Applications:**
        - Duplicate ticket removal
        - Data cleanup operations
        - Customer request fulfillment
        - System maintenance tasks

        **Recommended Usage:**
        - Verify ticket details before deletion
        - Ensure customer notification if needed
        - Document reason for administrative records
      parameters:
        - in: "path"
          name: "ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket"
      responses:
        200:
          description: "Service ticket deleted successfully"
          schema:
            $ref: "#/definitions/DeleteResponse"

  /service-tickets/{ticket_id}/assign-mechanic/{mechanic_id}:
    put:
      tags:
        - "service-tickets"
      summary: "Assign mechanic to service ticket"
      description: |
        **Professional Mechanic Assignment**

        Assign a qualified mechanic to a specific service ticket for optimal workflow management and customer service.

        **Authentication Required:** Customer or Mechanic JWT token

        **Professional Features:**
        - Intelligent mechanic matching
        - Workload distribution optimization
        - Skill-based assignment capabilities
        - Real-time availability checking

        **Business Benefits:**
        - Improved service efficiency
        - Better resource utilization
        - Enhanced customer satisfaction
        - Streamlined operations management
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket"
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
          description: "ID of the mechanic to assign"
      responses:
        200:
          description: "Mechanic assigned successfully"

  /service-tickets/{ticket_id}/remove-mechanic/{mechanic_id}:
    put:
      tags:
        - "service-tickets"
      summary: "Remove mechanic from service ticket"
      description: |
        **Professional Mechanic Reassignment**

        Remove a mechanic from a service ticket for workflow optimization, reassignment, or workload balancing.

        **Authentication Required:** Customer or Mechanic JWT token

        **Professional Features:**
        - Seamless mechanic transitions
        - Work history preservation
        - Labor hour tracking continuity
        - Customer notification capabilities

        **Use Cases:**
        - Mechanic unavailability management
        - Skill-based reassignments
        - Workload redistribution
        - Emergency coverage scenarios
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket"
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
          description: "ID of the mechanic to remove"
      responses:
        200:
          description: "Mechanic removed successfully"

  /service-tickets/{ticket_id}/edit-mechanics:
    put:
      tags:
        - "service-tickets"
      summary: "Edit mechanics on service ticket"
      description: "Add or remove multiple mechanics from a service ticket (requires customer authentication)."
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket"
        - in: "body"
          name: "body"
          description: "Mechanics to add or remove"
          required: true
          schema:
            $ref: "#/definitions/EditMechanicsPayload"
      responses:
        200:
          description: "Mechanics updated successfully"
          schema:
            $ref: "#/definitions/ServiceTicketResponse"

  /service-tickets/{ticket_id}/labor:
    post:
      tags:
        - "service-tickets"
      summary: "Log labor hours"
      description: "Log labor hours for a mechanic on a service ticket (requires mechanic authentication)."
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket"
        - in: "body"
          name: "body"
          description: "Labor log information"
          required: true
          schema:
            $ref: "#/definitions/LaborLogPayload"
      responses:
        201:
          description: "Labor hours logged successfully"
          schema:
            $ref: "#/definitions/LaborLogResponse"

  /service-tickets/labor/{labor_log_id}:
    put:
      tags:
        - "service-tickets"
      summary: "Update labor log"
      description: "Update labor hours logged by a mechanic (requires mechanic authentication)."
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "labor_log_id"
          type: "integer"
          required: true
          description: "ID of the labor log"
        - in: "body"
          name: "body"
          description: "Updated labor hours"
          required: true
          schema:
            $ref: "#/definitions/UpdateLaborLogPayload"
      responses:
        200:
          description: "Labor log updated successfully"
          schema:
            $ref: "#/definitions/LaborLogResponse"
    delete:
      tags:
        - "service-tickets"
      summary: "Delete labor log"
      description: |
        **Professional Labor Log Management**

        Remove a labor log entry from the system with comprehensive audit trail maintenance. This endpoint provides secure deletion capabilities with business rule enforcement.

        **Authentication Required:** Mechanic JWT token

        **Professional Features:**
        - Secure labor log deletion with authorization
        - Comprehensive audit trail preservation
        - Business rule validation and enforcement
        - Data integrity maintenance systems
        - Historical record preservation for compliance

        **Security & Validation:**
        - Only authorized mechanics can delete labor logs
        - Deletion events logged with user identification
        - Associated ticket data remains intact
        - Payroll calculations automatically updated
        - Compliance with labor law requirements

        **Business Applications:**
        - Correction of erroneous time entries
        - Administrative data cleanup operations
        - Payroll adjustment processing
        - Quality assurance and data validation
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "labor_log_id"
          type: "integer"
          required: true
          description: "ID of the labor log"
      responses:
        200:
          description: "Labor log deleted successfully"
          schema:
            $ref: "#/definitions/DeleteResponse"

  # Mechanic Endpoints
  /mechanics:
    get:
      tags:
        - "mechanics"
      summary: "List all mechanics"
      description: "Retrieve a list of all mechanics (requires mechanic authentication)."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Mechanics retrieved successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MechanicResponse"
    post:
      tags:
        - "mechanics"
      summary: "Create a new mechanic"
      description: |
        **Professional Mechanic Registration**

        Add a new mechanic to the shop's workforce management system. This endpoint handles complete mechanic onboarding with comprehensive validation.

        **Public Access** - No authentication required for initial setup

        **Professional Features:**
        - Complete mechanic profile creation
        - Skill and certification tracking
        - Salary and compensation management
        - Contact information validation
        - Employee ID generation

        **Validation Requirements:**
        - Unique email address verification
        - Phone number format validation
        - Salary range compliance checking
        - Password security enforcement
        - Name format standardization

        **Business Integration:**
        - Automatic service assignment eligibility
        - Payroll system integration readiness
        - Performance tracking initialization
        - Customer assignment capabilities
        - Reporting and analytics inclusion

        **Post-Registration Benefits:**
        - Immediate system access upon completion
        - Service ticket assignment eligibility
        - Labor hour logging capabilities
        - Inventory management permissions
      parameters:
        - in: "body"
          name: "body"
          description: "Mechanic information"
          required: true
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        201:
          description: "Mechanic created successfully"
          schema:
            $ref: "#/definitions/MechanicResponse"

  /mechanics/login:
    post:
      tags:
        - "mechanics"
      summary: "Mechanic login"
      description: "Validates mechanic credentials and returns an authentication token."
      parameters:
        - in: "body"
          name: "body"
          description: "Login credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"

  /mechanics/{mechanic_id}:
    get:
      tags:
        - "mechanics"
      summary: "Get a mechanic"
      description: "Retrieve details of a specific mechanic by ID (requires mechanic authentication)."
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
          description: "ID of the mechanic"
      responses:
        200:
          description: "Mechanic retrieved successfully"
          schema:
            $ref: "#/definitions/MechanicResponse"
    put:
      tags:
        - "mechanics"
      summary: "Update a mechanic"
      description: "Update an existing mechanic's information (requires mechanic authentication)."
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
          description: "ID of the mechanic"
        - in: "body"
          name: "body"
          description: "Updated mechanic information"
          required: true
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        200:
          description: "Mechanic updated successfully"
          schema:
            $ref: "#/definitions/MechanicResponse"
    delete:
      tags:
        - "mechanics"
      summary: "Delete a mechanic"
      description: "Remove a mechanic from the system (requires mechanic authentication)."
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
          description: "ID of the mechanic"
      responses:
        200:
          description: "Mechanic deleted successfully"
          schema:
            $ref: "#/definitions/DeleteResponse"

  /mechanics/{mechanic_id}/service_tickets:
    get:
      tags:
        - "mechanics"
      summary: "List mechanic's service tickets"
      description: "Retrieve all service tickets assigned to a specific mechanic (requires mechanic authentication)."
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "mechanic_id"
          type: "integer"
          required: true
          description: "ID of the mechanic"
      responses:
        200:
          description: "Mechanic's service tickets retrieved successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceTicketResponse"

  /mechanics/reports/top_labor_by_ticket:
    get:
      tags:
        - "mechanics"
      summary: "Top labor hours by ticket report"
      description: |
        **Advanced Labor Analytics Dashboard**

        Generate comprehensive reports showing service tickets with the highest labor hour investments. This endpoint provides critical insights for business optimization and resource allocation.

        **Public Access** - No authentication required for transparency

        **Professional Analytics:**
        - Labor hour distribution analysis
        - Service complexity identification
        - Resource allocation optimization data
        - Productivity benchmarking metrics
        - Cost analysis and profitability insights

        **Report Includes:**
        - Ticket identification and descriptions
        - Total labor hours per service ticket
        - Number of mechanics involved per ticket
        - Average hours per mechanic assignment
        - Service completion timeframes

        **Business Intelligence:**
        - Identify high-complexity service patterns
        - Optimize mechanic assignment strategies
        - Improve service time estimations
        - Enhance customer communication accuracy
        - Support pricing strategy development

        **Management Applications:**
        - Performance evaluation criteria
        - Training needs identification
        - Workflow optimization opportunities
        - Customer satisfaction correlation analysis
      responses:
        200:
          description: "Labor report retrieved successfully"
          schema:
            $ref: "#/definitions/LaborReportResponse"

  /mechanics/reports/most_tickets_worked:
    get:
      tags:
        - "mechanics"
      summary: "Most tickets worked report"
      description: |
        **Mechanic Productivity and Performance Analytics**

        Generate detailed reports highlighting the most productive mechanics based on service tickets handled. This endpoint provides essential data for performance evaluation and resource management.

        **Public Access** - No authentication required for transparency

        **Professional Analytics:**
        - Individual mechanic productivity metrics
        - Service ticket completion statistics
        - Labor hour distribution per mechanic
        - Performance benchmarking data
        - Workload balance analysis

        **Report Includes:**
        - Mechanic identification and profiles
        - Total service tickets handled
        - Cumulative labor hours logged
        - Average completion times
        - Service complexity indicators

        **Management Applications:**
        - Performance review and evaluation criteria
        - Merit-based compensation planning
        - Training program identification needs
        - Workload distribution optimization
        - Customer satisfaction correlation

        **Business Intelligence:**
        - Identify top-performing mechanics for recognition
        - Analyze workload distribution for fairness
        - Support capacity planning decisions
        - Enhance service quality through insights
        - Optimize team composition and assignments
      responses:
        200:
          description: "Mechanic productivity report retrieved successfully"
          schema:
            $ref: "#/definitions/ProductivityReportResponse"

  # Inventory Endpoints
  /inventory:
    get:
      tags:
        - "inventory"
      summary: "List all parts"
      description: |
        **Complete Inventory Management Overview**

        Retrieve a comprehensive list of all automotive parts in the inventory system. This endpoint provides essential information for parts management, service planning, and customer estimates.

        **Public Access** - No authentication required for transparency

        **Professional Features:**
        - Complete parts catalog with specifications
        - Real-time stock levels and availability
        - Current pricing for accurate estimates
        - Part categories and classifications
        - Search and filtering capabilities

        **Data Includes:**
        - Part identification and naming conventions
        - Detailed technical descriptions
        - Current stock quantities and availability
        - Pricing information for cost calculations
        - Part categories for easy navigation

        **Business Applications:**
        - Service estimation and quote generation
        - Parts availability checking for scheduling
        - Inventory level monitoring and reordering
        - Customer parts inquiries and support
        - Mechanic service planning and preparation

        **Integration Benefits:**
        - Service ticket system integration
        - Automated cost calculations
        - Stock level alerts and notifications
        - Procurement planning and vendor management
      responses:
        200:
          description: "Parts retrieved successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PartResponse"
    post:
      tags:
        - "inventory"
      summary: "Create a new part"
      description: |
        **Add New Part to Inventory**

        Create a new automotive part in the inventory system. This endpoint is restricted to authenticated mechanics only.

        **Authentication Required:** Mechanic JWT token

        **Professional Features:**
        - Comprehensive part validation
        - Automatic inventory tracking
        - Integration with service ticket system
        - Stock level monitoring

        **Business Rules:**
        - Part names must be unique
        - Prices must be positive values
        - Initial stock quantity required
        - Detailed descriptions for identification
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Part information"
          required: true
          schema:
            $ref: "#/definitions/CreatePartPayload"
      responses:
        201:
          description: "Part created successfully"
          schema:
            $ref: "#/definitions/PartResponse"

  /inventory/{part_id}:
    get:
      tags:
        - "inventory"
      summary: "Get a part"
      description: |
        **Detailed Parts Information Retrieval**

        Retrieve comprehensive details of a specific automotive part by ID. This endpoint provides complete part specifications, pricing, and stock information.

        **Public Access** - No authentication required for transparency

        **Professional Features:**
        - Complete part specifications and descriptions
        - Real-time stock level information
        - Current pricing and cost details
        - Part compatibility information
        - Vendor and supplier details

        **Data Includes:**
        - Part identification number and name
        - Detailed technical descriptions
        - Current stock quantities
        - Pricing information for estimates
        - Last updated timestamps

        **Business Applications:**
        - Customer price quotes and estimates
        - Service ticket planning and parts allocation
        - Inventory verification and auditing
        - Vendor comparison and procurement
        - Customer parts inquiries and support

        **Integration Benefits:**
        - Service ticket system compatibility
        - Cost calculation automation
        - Stock level monitoring
        - Procurement planning support
      parameters:
        - in: "path"
          name: "part_id"
          type: "integer"
          required: true
          description: "ID of the part"
      responses:
        200:
          description: "Part retrieved successfully"
          schema:
            $ref: "#/definitions/PartResponse"
    put:
      tags:
        - "inventory"
      summary: "Update a part"
      description: |
        **Update Existing Inventory Part**

        Modify an existing part's information in the inventory system. This endpoint requires mechanic authentication for security.

        **Authentication Required:** Mechanic JWT token

        **Professional Features:**
        - Real-time inventory updates
        - Price adjustment tracking
        - Stock level modifications
        - Part description updates

        **Use Cases:**
        - Price adjustments for market changes
        - Stock quantity corrections
        - Part description improvements
        - Vendor information updates
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "part_id"
          type: "integer"
          required: true
          description: "ID of the part"
        - in: "body"
          name: "body"
          description: "Updated part information"
          required: true
          schema:
            $ref: "#/definitions/CreatePartPayload"
      responses:
        200:
          description: "Part updated successfully"
          schema:
            $ref: "#/definitions/PartResponse"
    delete:
      tags:
        - "inventory"
      summary: "Delete a part"
      description: |
        **Remove Part from Inventory**

        Permanently remove a part from the inventory system. This action requires mechanic authentication and should be used carefully.

        **Authentication Required:** Mechanic JWT token

        **Professional Features:**
        - Secure part removal process
        - Inventory integrity maintenance
        - Audit trail preservation
        - Related records cleanup

        **Important Notes:**
        - Action cannot be undone
        - Associated service tickets remain intact
        - Historical data preserved for reporting
        - Confirmation recommended before deletion
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "part_id"
          type: "integer"
          required: true
          description: "ID of the part"
      responses:
        200:
          description: "Part deleted successfully"
          schema:
            $ref: "#/definitions/DeleteResponse"

  /inventory/{part_id}/remove_stock:
    post:
      tags:
        - "inventory"
      summary: "Remove stock from a part"
      description: |
        **Professional Stock Reduction Management**

        Reduce the quantity of a specific part in inventory with comprehensive tracking and validation. This endpoint ensures accurate stock management and audit trail maintenance.

        **Authentication Required:** Mechanic JWT token

        **Professional Features:**
        - Real-time stock adjustments with validation
        - Inventory accuracy maintenance systems
        - Usage tracking for comprehensive analytics
        - Automatic low-stock alerts and notifications
        - Audit trail logging for compliance

        **Business Logic & Validation:**
        - Cannot reduce inventory below zero stock
        - Validates requested quantity against available stock
        - Updates inventory levels immediately upon success
        - Logs all transactions with timestamps for audit
        - Triggers reorder alerts when applicable

        **Integration Benefits:**
        - Service ticket system compatibility
        - Automatic cost calculations for billing
        - Procurement planning data generation
        - Business intelligence and reporting
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "part_id"
          type: "integer"
          required: true
          description: "ID of the part"
        - in: "body"
          name: "body"
          description: "Quantity to remove"
          required: true
          schema:
            $ref: "#/definitions/RemoveStockPayload"
      responses:
        200:
          description: "Stock removed successfully"
          schema:
            $ref: "#/definitions/StockUpdateResponse"

  /inventory/{part_id}/add-to-ticket/{ticket_id}:
    post:
      tags:
        - "inventory"
      summary: "Add part to service ticket"
      description: |
        **Service Ticket Parts Integration**

        Add a specific part to a service ticket, automatically reducing inventory stock and tracking part usage for billing and analytics.

        **Authentication Required:** Mechanic JWT token

        **Professional Features:**
        - Automatic stock deduction
        - Service ticket integration
        - Cost calculation and tracking
        - Real-time inventory updates

        **Workflow Integration:**
        - Part assigned to service ticket
        - Stock quantity reduced by 1
        - Service cost automatically calculated
        - Mechanic labor tracking updated
      security:
        - bearerAuth: []
      parameters:
        - in: "path"
          name: "part_id"
          type: "integer"
          required: true
          description: "ID of the part"
        - in: "path"
          name: "ticket_id"
          type: "integer"
          required: true
          description: "ID of the service ticket"
      responses:
        200:
          description: "Part added to ticket successfully"

  # Utility Endpoints
  /fakedata/seed-database:
    post:
      tags:
        - "fakedata"
      summary: "Seed database with fake data"
      description: |
        **Development and Testing Database Population**

        Clear existing database contents and populate with realistic test data for development, testing, and demonstration purposes. This endpoint is essential for system setup and quality assurance.

        **Public Access** - No authentication required for development flexibility

        **Professional Features:**
        - Complete database reset and cleanup
        - Realistic test data generation
        - Referential integrity maintenance
        - Scalable data volume creation
        - Consistent data relationships

        **Generated Data Includes:**
        - Diverse customer profiles with realistic information
        - Professional mechanic profiles with varying skills
        - Comprehensive service tickets with realistic scenarios
        - Inventory parts with authentic specifications
        - Labor logs with realistic time tracking

        **Development Benefits:**
        - Rapid environment setup for testing
        - Consistent data across development teams
        - Realistic scenario simulation capabilities
        - Performance testing with substantial datasets
        - Demonstration and training data availability

        **Use Cases:**
        - Development environment initialization
        - Quality assurance testing preparation
        - Performance benchmarking setup
        - Customer demonstration data
        - Training environment preparation

        **Important Notes:**
        - All existing data will be permanently deleted
        - Use only in development/testing environments
        - Not recommended for production systems
        - Creates substantial amounts of test data
      responses:
        200:
          description: "Database seeded successfully"
          schema:
            $ref: "#/definitions/SeedResponse"

# Data Schemas
definitions:
  # Authentication Schemas
  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    required:
      - email
      - password

  LoginResponse:
    type: "object"
    properties:
      message:
        type: "string"
      status:
        type: "string"
      token:
        type: "string"

  # Customer Schemas
  CreateCustomerPayload:
    type: "object"
    properties:
      email:
        type: "string"
      name:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
    required:
      - email
      - name
      - password
      - phone

  CreateCustomerResponse:
    type: "object"
    properties:
      email:
        type: "string"
      id:
        type: "integer"
      name:
        type: "string"
      phone:
        type: "string"

  # Service Ticket Schemas
  CreateServiceTicketPayload:
    type: "object"
    properties:
      description:
        type: "string"
      service_date:
        type: "string"
        format: "date"
      VIN:
        type: "string"
    required:
      - description
      - service_date
      - VIN

  ServiceTicketResponse:
    type: "object"
    properties:
      customer_id:
        type: "integer"
      description:
        type: "string"
      labor_logs:
        type: "array"
        items:
          type: "object"
      mechanics:
        type: "array"
        items:
          type: "object"
          properties:
            email:
              type: "string"
            id:
              type: "integer"
            name:
              type: "string"
      service_date:
        type: "string"
      ticket_id:
        type: "integer"
      VIN:
        type: "string"

  UpdateServiceTicketPayload:
    type: "object"
    properties:
      description:
        type: "string"
      service_date:
        type: "string"
        format: "date"
      VIN:
        type: "string"

  LaborLogPayload:
    type: "object"
    properties:
      hours_worked:
        type: "number"
      mechanic_id:
        type: "integer"
    required:
      - hours_worked
      - mechanic_id

  LaborLogResponse:
    type: "object"
    properties:
      date_logged:
        type: "string"
      hours_worked:
        type: "number"
      id:
        type: "integer"
      mechanic_id:
        type: "integer"
      ticket_id:
        type: "integer"

  UpdateLaborLogPayload:
    type: "object"
    properties:
      hours_worked:
        type: "number"
    required:
      - hours_worked

  EditMechanicsPayload:
    type: "object"
    properties:
      add_mechanic_ids:
        type: "array"
        items:
          type: "integer"
      remove_mechanic_ids:
        type: "array"
        items:
          type: "integer"

  # Mechanic Schemas
  CreateMechanicPayload:
    type: "object"
    properties:
      email:
        type: "string"
      name:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
      password:
        type: "string"
    required:
      - email
      - name
      - phone
      - salary
      - password

  MechanicResponse:
    type: "object"
    properties:
      email:
        type: "string"
      id:
        type: "integer"
      name:
        type: "string"
      phone:
        type: "string"
      salary:
        type: "number"
      password:
        type: "string"

  LaborReportResponse:
    type: "object"
    properties:
      mechanics_count:
        type: "integer"
      ticket_id:
        type: "integer"
      total_hours:
        type: "number"

  ProductivityReportResponse:
    type: "object"
    properties:
      mechanic_id:
        type: "integer"
      mechanic_name:
        type: "string"
      tickets_worked:
        type: "integer"
      total_hours:
        type: "number"

  # Inventory Schemas
  CreatePartPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
      quantity_in_stock:
        type: "integer"
      description:
        type: "string"

    required:
      - name
      - price
      - quantity_in_stock
      - description

  PartResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
      quantity_in_stock:
        type: "integer"
      description:
        type: "string"

  RemoveStockPayload:
    type: "object"
    properties:
      quantity:
        type: "integer"
    required:
      - quantity

  StockUpdateResponse:
    type: "object"
    properties:
      message:
        type: "string"
      new_quantity_in_stock:
        type: "integer"

  # Utility Schemas
  DeleteResponse:
    type: "object"
    properties:
      message:
        type: "string"

  SeedResponse:
    type: "object"
    properties:
      customers_created:
        type: "integer"
      mechanics_created:
        type: "integer"
      message:
        type: "string"
      parts_created:
        type: "integer"
      tickets_created:
        type: "integer"
